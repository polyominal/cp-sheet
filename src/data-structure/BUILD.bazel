load("//:rules.bzl", "my_cc_library", "my_cc_test")

my_cc_library(
    name = "flatten-vector",
    hdrs = ["flatten-vector.hpp"],
)

my_cc_test(
    name = "flatten-vector-test",
    srcs = ["flatten-vector-test.cpp"],
    deps = [
        "//src/data-structure:flatten-vector",
    ],
)

my_cc_library(
    name = "binary-indexed-tree",
    hdrs = ["binary-indexed-tree.hpp"],
)

my_cc_library(
    name = "segtree",
    hdrs = ["segtree.hpp"],
)

my_cc_library(
    name = "fast-set",
    hdrs = ["fast-set.hpp"],
)

my_cc_test(
    name = "fast-set-test",
    srcs = ["fast-set-test.cpp"],
    deps = [
        "//src/data-structure:fast-set",
    ],
)

my_cc_library(
    name = "assignment-segtree",
    hdrs = ["assignment-segtree.hpp"],
    deps = [
        "//src/data-structure:fast-set",
        "//src/data-structure:segtree",
    ],
)

my_cc_test(
    name = "binary-indexed-tree-test",
    srcs = ["binary-indexed-tree-test.cpp"],
    deps = [
        "//src/data-structure:binary-indexed-tree",
    ],
)

my_cc_test(
    name = "assignment-segtree-test",
    srcs = ["assignment-segtree-test.cpp"],
    deps = [
        "//src/algebra:modint",
        "//src/data-structure:assignment-segtree",
    ],
)

my_cc_library(
    name = "treap",
    hdrs = ["treap.hpp"],
)

my_cc_test(
    name = "treap-test",
    srcs = ["treap-test.cpp"],
    deps = [
        "//src/algebra:modint",
        "//src/data-structure:treap",
    ],
)

my_cc_library(
    name = "lazy-segtree",
    hdrs = ["lazy-segtree.hpp"],
)

my_cc_test(
    name = "lazy-segtree-test",
    srcs = ["lazy-segtree-test.cpp"],
    deps = [
        "//src/algebra:modint",
        "//src/data-structure:lazy-segtree",
    ],
)

my_cc_library(
    name = "persistent-heap",
    hdrs = ["persistent-heap.hpp"],
)

my_cc_test(
    name = "persistent-heap-test",
    srcs = ["persistent-heap-test.cpp"],
    deps = [
        "//src/data-structure:persistent-heap",
    ],
)

my_cc_library(
    name = "unionfind",
    hdrs = ["unionfind.hpp"],
)

my_cc_test(
    name = "unionfind-test",
    srcs = ["unionfind-test.cpp"],
    deps = [
        "//src/data-structure:unionfind",
    ],
)

my_cc_library(
    name = "queue-aggregation",
    hdrs = ["queue-aggregation.hpp"],
)

my_cc_test(
    name = "queue-aggregation-test",
    srcs = ["queue-aggregation-test.cpp"],
    deps = [
        "//src/data-structure:queue-aggregation",
    ],
)

my_cc_library(
    name = "line-container",
    hdrs = ["line-container.hpp"],
)

my_cc_test(
    name = "line-container-test",
    srcs = ["line-container-test.cpp"],
    deps = [
        "//src/data-structure:line-container",
    ],
)

my_cc_library(
    name = "hash-map",
    hdrs = ["hash-map.hpp"],
)

my_cc_test(
    name = "hash-map-test",
    srcs = ["hash-map-test.cpp"],
    deps = [
        "//src/data-structure:hash-map",
    ],
)
